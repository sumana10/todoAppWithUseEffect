{"version":3,"sources":["Components/Todos.js","Components/TodoForm.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Todos","todos","markComplete","ListGroup","className","map","todo","ListGroupItem","todoString","onClick","id","TodoForm","addTodos","useState","setTodoString","Form","onSubmit","e","preventDefault","alert","v4","FormGroup","InputGroup","Input","type","name","placeholder","value","onChange","target","InputGroupAddon","addonType","Button","color","App","setTodos","useEffect","localTodos","localStorage","getItem","console","log","JSON","parse","a","setItem","stringify","Container","fluid","src","logo","alt","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAwBeA,EAhBD,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,aACrB,OAEC,cAACC,EAAA,EAAD,CAAWC,UAAU,kBAArB,SACCH,EAAMI,KAAI,SAAAC,GAAI,OACf,eAACC,EAAA,EAAD,WACCD,EAAKE,WACN,sBAAMJ,UAAU,YAChBK,QAAU,kBAAMP,EAAaI,EAAKI,KADlC,SAEC,cAAC,IAAD,QAJmBJ,EAAKI,U,wDCCb,SAASC,EAAT,GAA+B,IAAZC,EAAW,EAAXA,SAEhC,EAAoCC,mBAAS,IAA7C,mBAAOL,EAAP,KAAmBM,EAAnB,KAqBA,OACE,cAACC,EAAA,EAAD,CAAMC,SApBa,SAAAC,GAInB,GAFAA,EAAEC,iBAEgB,KAAfV,EAEA,OAAOW,MAAM,qBAIhB,IAAMb,EAAO,CACXE,aACAE,GAAIU,eAGNR,EAASN,GAETQ,EAAc,KAGd,SACE,cAACO,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACAC,KAAK,OACLC,KAAK,OACLf,GAAG,OACHgB,YAAY,eACXC,MAAOnB,GAA0B,GAClCoB,SAAW,SAAAX,GAAC,OAAGH,EAAcG,EAAEY,OAAOF,UAEtC,cAACG,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACC,EAAA,EAAD,CAAQC,MAAM,OAAd,+BClDG,UAA0B,iCCS1B,SAASC,IAEtB,MAA0BrB,mBAAS,IAAnC,mBAAOZ,EAAP,KAAckC,EAAd,KAIAC,qBAAU,WACR,IAAMC,EAAaC,aAAaC,QAAQ,SAExCC,QAAQC,IAAI,CAACJ,eACVA,GACDF,EAASO,KAAKC,MAAMN,MAErB,IAKH,IAAMzB,EAAQ,uCAAG,WAAMN,GAAN,SAAAsC,EAAA,sDACfT,EAAS,GAAD,mBAAKlC,GAAL,CAAYK,KADL,2CAAH,sDAMd8B,qBAAU,WACRE,aAAaO,QAAQ,QAASH,KAAKI,UAAU7C,MAC5C,CAACA,IAMJ,OACE,eAAC8C,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACA,qBAAKC,IAAMC,EAAM9C,UAAU,WAAW+C,IAAI,SAC1C,yDACA,cAACxC,EAAD,CAAUC,SAAUA,IACpB,cAAC,EAAD,CAAOX,MAAOA,EAAOC,aARF,SAAAQ,GACnByB,EAASlC,EAAMmD,QAAO,SAAA9C,GAAI,OAAIA,EAAKI,KAAOA,YCvC9C,IAYe2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.14fb1a3d.chunk.js","sourcesContent":["import React from 'react'\r\nimport{\r\n  ListGroup,\r\n  ListGroupItem\r\n} from \"reactstrap\"\r\n\r\nimport {FaCheckDouble} from \"react-icons/fa\"\r\n\r\nconst Todos = ({todos, markComplete}) =>{\r\n  return (\r\n\r\n   <ListGroup className=\"mt-5 mb-2 items\">\r\n   {todos.map(todo =>(\r\n   <ListGroupItem key={todo.id}>\r\n   {todo.todoString}\r\n   <span className=\"float-end\"\r\n   onClick ={() => markComplete(todo.id)}\r\n   ><FaCheckDouble/></span>\r\n   </ListGroupItem>\r\n   ))}\r\n   </ListGroup>\r\n   \r\n  )\r\n}\r\nexport default Todos","import React, {useState} from 'react'\r\nimport{\r\n  FormGroup,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Button,\r\n  Form,\r\n} from \"reactstrap\"\r\n\r\nimport {v4} from \"uuid\"\r\n\r\n//methods can also be passed into the prop\r\n\r\nexport default function TodoForm({addTodos}) {\r\n\r\n  const [todoString, setTodoString] = useState(\"\");\r\n\r\n  const handleSubmit = e =>{\r\n\r\n    e.preventDefault();\r\n   \r\n    if(todoString === \"\"){\r\n    \r\n       return alert(\"Please enter todo\")\r\n\r\n    }\r\n\r\n    const todo = {\r\n      todoString,\r\n      id: v4()\r\n    }\r\n   \r\n    addTodos(todo)\r\n\r\n    setTodoString(\"\")\r\n  }\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <FormGroup>\r\n        <InputGroup>\r\n          <Input\r\n          type=\"text\"\r\n          name=\"todo\"\r\n          id=\"todo\"\r\n          placeholder=\"Enter a todo\"\r\n           value={todoString ? todoString : \"\"}\r\n          onChange= {e =>setTodoString(e.target.value)}\r\n          />\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <Button color=\"info\">\r\n              Add Todo\r\n            </Button>\r\n          </InputGroupAddon>\r\n        </InputGroup>\r\n      </FormGroup>\r\n    </Form>\r\n\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nimport React, {useState, useEffect} from 'react'\nimport { Container } from 'reactstrap'\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./App.css\"\nimport Todos from \"./Components/Todos\"\nimport TodoForm from \"./Components/TodoForm\"\nimport logo from './logo.svg';\n\nexport default function App() {\n\n  const [todos, setTodos] = useState([])\n\n  //set todos from localstorage to state before rendering component\n\n  useEffect(()=>{\n    const localTodos = localStorage.getItem(\"todos\")\n    //check what's in localstorage this a huge object\n    console.log({localTodos});\n    if(localTodos){\n      setTodos(JSON.parse(localTodos))\n    }\n  }, []) \n\n  //useEffect requires a call back and second list of dependencies //here it's array(compulsory) \n\n  //loading enter array and updating with todo\n  const addTodos = async todo =>{\n    setTodos([...todos, todo])\n  }\n\n  //if there is a change in todos then set the todos in localstorage\n  //needs to do something after rendering\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos))\n  }, [todos])\n  \n  //discard id and create new todos list and set into state then it goes to localstorage\n  const markComplete = id =>{\n    setTodos(todos.filter(todo => todo.id !== id))\n  }\n  return (\n    <Container fluid>\n    <img src ={logo} className=\"App-logo\" alt=\"logo\"/>\n    <h1>Todo with local storage</h1>\n    <TodoForm addTodos={addTodos}/>\n    <Todos todos={todos} markComplete={markComplete}/>\n    \n    </Container>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}